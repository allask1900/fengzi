列表页面正则表达式
必选
(?<producturl>[^"]*?)
可选
(?<fullname>[^>]*?)  
(?<smallimage>[^"]*?)
(?<model>[^>]*?)  
(?<model13>[^>]*?)  
(?<model10>[^>]*?)  
(?<brandname>[^>]*?)
(?<author>[^>]*?)
(?<price>[^>]*?)
(?<usedprice>[^>]*?))
(?<orgprice>[^>]*?))

(?<PageCount>[^<]*?)


	    case "txtGetList_Str_GetCodeBeginAndEnd":
	        content = "(字符串数组，以“=====”分隔)本配置为提取分类入口的页面代码开始及结束标识字符串，格式为 开始字符串=====结束字符串";
	        break;
	    case "txtGetList_Reg_GetCategoryUrl":
	        content = "(正则表达式，包含参数: (?<categoryurl>[^>]*?) )本配置为提取分类入口正则表达式)";
	        break;
	    case "txtList_Reg_ChangeProductUrl":
	        content = "(正则表达式替换,格式:StrReg1====>StrReg2)更改产品Url";
	        break;
	    case "txtList_Reg_GetProductList":
	        content = "(正则表达式，包含参数: 必须参数(?<producturl>[^>]*?) ;可选参数 (?<fullname>[^>]*?)  (?<smallimage>[^>]*?)  (?<model>[^>]*?)  (?<model13>[^>]*?)  (?<model10>[^>]*?)  (?<brandname>[^>]*?)  (?<author>[^>]*?)  (?<price>[^>]*?)  (?<usedprice>[^>]*?))列表页面正则表达式";
	        break;
	    case "txtList_Str_GetCodeBeginAndEnd":
	        content = "(字符串数组，以“=====”分隔)列表页起止标识";
	        break;
	    case "txtList_Str_PostData":
	        content = "(一段字符串)列表页面为Post方式访问时，附加的Post数据";
	        break;
	    case "txtPageNo_Ints_BeginNoAndCountAndMaxNo":
	        content = "(分页算法,格式:起始页号=====开始页|页大小:当分页方式为产品数时本设置有效=====页大小|最大页号:当分类入口页面只能提取到产品数时,使用本配置计算出总分页数)";
	        break;
	    case "txtPageNo_Reg_GetMaxNoOrMaxCount":
	        content = "(得到最大分页数或者得到最大产品数的正则表达式,格式: (?<pagecount>[\d,]*?) ;也可以直接输入的最大分页整数值或者最大产品整数值)";
	        break;
	    case "txtPageNo_Reg_RepalcePno":
	        content = "分页符号正则表达式替换,格式：StrReg1====>StrReg[pno],如: \"\?====>page=[pno]&\" 替换的结果必须包含[pno]字符串，爬虫分页时再替换该字符串。";
	        break;
	    case "txtPageNo_Str_GetCodeBeginAndEnd":
	        content = "(字符串数组，以“=====”分隔)为了提取最大分页数或者最大产品数而从页面源代码中截取一段代码的开始及结束代码";
	        break;
	    case "txtProduct_Reg_GetProductParameter":
	        content = "(本配置包括所有能在产品页获取到的属性) 
			<price> 
			=====usedprice===money=== === <usedprice> 
			=====fullname===String=== === <fullname> 
			=====brandname ===String=== === <brandname> 
			=====attributes ===text=== <attributes>
										-----attributesReg1---->attributesReplace1
										-----attributesReg2---->attributesReplace2 
										(如:
										<th[\s]*?class=\"tdTitle\"[\s]*?colspan=\"2\">(?<tname>[\s\S]*?)</th>---->|t|${tname}|tn|
										-----<td[\s]*?class=\"tdTitle\">(?<cname>[\s\S]*?)</td>---->|c|${cname}|cn|) 
			=====<model10>
			=====<model13>
			=====<model>
			(这一组有先后顺序,注：凡是有提取基础代码的行为，其正则表达式组都有顺序) 
			=====<smallimage> <bigImagepageurl>-----<bigimage>
			=====<content_url>-----<content>-----regString1---->regString2-----regString3---->regString4
			=====<author>
			=====<aboutauthor_url>-----<aboutauthor>
			=====<directory>
			 
	        break;
	    case "txtProduct_Str_GetCodeBeginAndEnd":
	        content = "(字符串数组，以“=====”分隔)为了提取产品的所有属性，而从产品页面源代码中截取一段代码的开始及结束代码";
	        break;
	    case "txtProduct_Str_PostData":
	        content = "当产品页面是POST方式提交时,附加的一段Post字符串";
	        break;
	    case "txtProduct_Reg_GetProductComment":
	        content = "产品评论正则表达式集合";
	        break;
	    case "txtUpdatePrice_Reg_GetPrice":
	        content = "更新价格时使用的提取产品页面价格的正则表达式(?<price>[^>]*?)=====(?<usedprice>[^>]*?)";
	        break;
	    case "txtUpdatePrice_Str_GetCodeBeginAndEnd":
	        content = "(字符串数组，以“=====”分隔)为了提取产品的价格，而从产品页面源代码中截取一段代码的开始及结束代码";
	        break; 